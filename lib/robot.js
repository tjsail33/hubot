// Generated by CoffeeScript 1.6.3
(function() {
  var Brain, CatchAllMessage, EnterMessage, EventEmitter, Fs, HUBOT_DEFAULT_ADAPTERS, HUBOT_DOCUMENTATION_SECTIONS, HttpClient, LeaveMessage, Listener, Log, Middleware, Path, Response, Robot, TextListener, TopicMessage, User, async, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  Fs = require('fs');

  Log = require('log');

  Path = require('path');

  HttpClient = require('scoped-http-client');

  EventEmitter = require('events').EventEmitter;

  async = require('async');

  User = require('./user');

  Brain = require('./brain');

  Response = require('./response');

  _ref = require('./listener'), Listener = _ref.Listener, TextListener = _ref.TextListener;

  _ref1 = require('./message'), EnterMessage = _ref1.EnterMessage, LeaveMessage = _ref1.LeaveMessage, TopicMessage = _ref1.TopicMessage, CatchAllMessage = _ref1.CatchAllMessage;

  Middleware = require('./middleware');

  HUBOT_DEFAULT_ADAPTERS = ['campfire', 'shell'];

  HUBOT_DOCUMENTATION_SECTIONS = ['description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'authors', 'examples', 'tags', 'urls'];

  Robot = (function() {
    function Robot(adapterPath, adapter, httpd, name, alias) {
      var _this = this;
      if (name == null) {
        name = 'Hubot';
      }
      if (alias == null) {
        alias = false;
      }
      this.name = name;
      this.events = new EventEmitter;
      this.brain = new Brain(this);
      this.alias = alias;
      this.adapter = null;
      this.Response = Response;
      this.commands = [];
      this.listeners = [];
      this.middleware = {
        listener: new Middleware(this),
        receive: new Middleware(this)
      };
      this.logger = new Log(process.env.HUBOT_LOG_LEVEL || 'info');
      this.pingIntervalId = null;
      this.globalHttpOptions = {};
      this.parseVersion();
      if (httpd) {
        this.setupExpress();
      } else {
        this.setupNullRouter();
      }
      this.loadAdapter(adapterPath, adapter);
      this.adapterName = adapter;
      this.errorHandlers = [];
      this.on('error', function(err, res) {
        return _this.invokeErrorHandlers(err, res);
      });
      this.onUncaughtException = function(err) {
        return _this.emit('error', err);
      };
      process.on('uncaughtException', this.onUncaughtException);
    }

    Robot.prototype.listen = function(matcher, options, callback) {
      return this.listeners.push(new Listener(this, matcher, options, callback));
    };

    Robot.prototype.hear = function(regex, options, callback) {
      return this.listeners.push(new TextListener(this, regex, options, callback));
    };

    Robot.prototype.respond = function(regex, options, callback) {
      return this.hear(this.respondPattern(regex), options, callback);
    };

    Robot.prototype.respondPattern = function(regex) {
      var a, alias, b, modifiers, name, newRegex, pattern, re, _ref2;
      re = regex.toString().split('/');
      re.shift();
      modifiers = re.pop();
      if (re[0] && re[0][0] === '^') {
        this.logger.warning("Anchors don't work well with respond, perhaps you want to use 'hear'");
        this.logger.warning("The regex in question was " + (regex.toString()));
      }
      pattern = re.join('/');
      name = this.name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
      if (this.alias) {
        alias = this.alias.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        _ref2 = name.length > alias.length ? [name, alias] : [alias, name], a = _ref2[0], b = _ref2[1];
        newRegex = new RegExp("^\\s*[@]?(?:" + a + "[:,]?|" + b + "[:,]?)\\s*(?:" + pattern + ")", modifiers);
      } else {
        newRegex = new RegExp("^\\s*[@]?" + name + "[:,]?\\s*(?:" + pattern + ")", modifiers);
      }
      return newRegex;
    };

    Robot.prototype.enter = function(options, callback) {
      return this.listen((function(msg) {
        return msg instanceof EnterMessage;
      }), options, callback);
    };

    Robot.prototype.leave = function(options, callback) {
      return this.listen((function(msg) {
        return msg instanceof LeaveMessage;
      }), options, callback);
    };

    Robot.prototype.topic = function(options, callback) {
      return this.listen((function(msg) {
        return msg instanceof TopicMessage;
      }), options, callback);
    };

    Robot.prototype.error = function(callback) {
      return this.errorHandlers.push(callback);
    };

    Robot.prototype.invokeErrorHandlers = function(err, res) {
      var errErr, errorHandler, _i, _len, _ref2, _results;
      this.logger.error(err.stack);
      _ref2 = this.errorHandlers;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        errorHandler = _ref2[_i];
        try {
          _results.push(errorHandler(err, res));
        } catch (_error) {
          errErr = _error;
          _results.push(this.logger.error("while invoking error handler: " + errErr + "\n" + errErr.stack));
        }
      }
      return _results;
    };

    Robot.prototype.catchAll = function(options, callback) {
      if (callback == null) {
        callback = options;
        options = {};
      }
      return this.listen((function(msg) {
        return msg instanceof CatchAllMessage;
      }), options, (function(msg) {
        msg.message = msg.message.message;
        return callback(msg);
      }));
    };

    Robot.prototype.listenerMiddleware = function(middleware) {
      this.middleware.listener.register(middleware);
      return void 0;
    };

    Robot.prototype.receiveMiddleware = function(middleware) {
      this.middleware.receive.register(middleware);
      return void 0;
    };

    Robot.prototype.receive = function(message, cb) {
      return this.middleware.receive.execute({
        response: new Response(this, message)
      }, this.processListeners.bind(this), cb);
    };

    Robot.prototype.processListeners = function(context, done) {
      var anyListenersExecuted,
        _this = this;
      anyListenersExecuted = false;
      async.detectSeries(this.listeners, function(listener, cb) {
        var err;
        try {
          return listener.call(context.response.message, _this.middleware.listener, function(listenerExecuted) {
            anyListenersExecuted = anyListenersExecuted || listenerExecuted;
            return process.nextTick(function() {
              return cb(context.response.message.done);
            });
          });
        } catch (_error) {
          err = _error;
          _this.emit('error', err, new _this.Response(_this, context.response.message, []));
          return cb(false);
        }
      }, function(_) {
        if (!(context.response.message instanceof CatchAllMessage) && !anyListenersExecuted) {
          _this.logger.debug('No listeners executed; falling back to catch-all');
          return _this.receive(new CatchAllMessage(context.response.message), done);
        } else {
          if (done != null) {
            return process.nextTick(done);
          }
        }
      });
      return void 0;
    };

    Robot.prototype.loadFile = function(path, file) {
      var error, ext, full, script;
      ext = Path.extname(file);
      full = Path.join(path, Path.basename(file, ext));
      if (require.extensions[ext]) {
        try {
          script = require(full);
          if (typeof script === 'function') {
            script(this);
            return this.parseHelp(Path.join(path, file));
          } else {
            return this.logger.warning("Expected " + full + " to assign a function to module.exports, got " + (typeof script));
          }
        } catch (_error) {
          error = _error;
          this.logger.error("Unable to load " + full + ": " + error.stack);
          return process.exit(1);
        }
      }
    };

    Robot.prototype.load = function(path) {
      var file, _i, _len, _ref2, _results;
      this.logger.debug("Loading scripts from " + path);
      if (Fs.existsSync(path)) {
        _ref2 = Fs.readdirSync(path).sort();
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          file = _ref2[_i];
          _results.push(this.loadFile(path, file));
        }
        return _results;
      }
    };

    Robot.prototype.loadHubotScripts = function(path, scripts) {
      var script, _i, _len, _results;
      this.logger.debug("Loading hubot-scripts from " + path);
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        script = scripts[_i];
        _results.push(this.loadFile(path, script));
      }
      return _results;
    };

    Robot.prototype.loadExternalScripts = function(packages) {
      var err, pkg, scripts, _i, _len, _results, _results1;
      this.logger.debug("Loading external-scripts from npm packages");
      try {
        if (packages instanceof Array) {
          _results = [];
          for (_i = 0, _len = packages.length; _i < _len; _i++) {
            pkg = packages[_i];
            _results.push(require(pkg)(this));
          }
          return _results;
        } else {
          _results1 = [];
          for (pkg in packages) {
            scripts = packages[pkg];
            _results1.push(require(pkg)(this, scripts));
          }
          return _results1;
        }
      } catch (_error) {
        err = _error;
        this.logger.error("Error loading scripts from npm package - " + err.stack);
        return process.exit(1);
      }
    };

    Robot.prototype.setupExpress = function() {
      var RedisStore, address, app, cookieParser, err, express, herokuUrl, multipart, pass, port, redisUrl, sessions, stat, user,
        _this = this;
      user = process.env.EXPRESS_USER;
      pass = process.env.EXPRESS_PASSWORD;
      stat = process.env.EXPRESS_STATIC;
      port = process.env.EXPRESS_PORT || process.env.PORT || 8080;
      address = process.env.EXPRESS_BIND_ADDRESS || process.env.BIND_ADDRESS || '0.0.0.0';
      express = require('express');
      multipart = require('connect-multiparty');
      sessions = require('express-sessions');
      RedisStore = require('connect-redis')(sessions);
      cookieParser = require("cookie-parser");
      app = express();
      app.use(function(req, res, next) {
        res.setHeader("X-Powered-By", "hubot/" + _this.name);
        return next();
      });
      redisUrl = process.env.REDIS_URL || process.env.REDISTOGO_URL || process.env.REDISCLOUD_URL;
      app.use(cookieParser);
      app.use(sessions({
        store: new RedisStore({
          url: process.env.REDISTOGO_URL
        }),
        secret: 'keyboard cat',
        secure: true,
        saveUninitialized: true,
        resave: true
      }));
      if (user && pass) {
        app.use(express.basicAuth(user, pass));
      }
      app.use(express.query());
      app.use(express.json());
      app.use(express.urlencoded());
      app.use(multipart({
        maxFilesSize: 100 * 1024 * 1024
      }));
      if (stat) {
        app.use(express["static"](stat));
      }
      try {
        this.server = app.listen(port, address);
        this.router = app;
      } catch (_error) {
        err = _error;
        this.logger.error("Error trying to start HTTP server: " + err + "\n" + err.stack);
        process.exit(1);
      }
      herokuUrl = process.env.HEROKU_URL;
      if (herokuUrl) {
        if (!/\/$/.test(herokuUrl)) {
          herokuUrl += '/';
        }
        return this.pingIntervalId = setInterval(function() {
          return HttpClient.create("" + herokuUrl + "hubot/ping").post()(function(err, res, body) {
            return _this.logger.info('keep alive ping!');
          });
        }, 5 * 60 * 1000);
      }
    };

    Robot.prototype.setupNullRouter = function() {
      var msg,
        _this = this;
      msg = "A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.";
      return this.router = {
        get: function() {
          return _this.logger.warning(msg);
        },
        post: function() {
          return _this.logger.warning(msg);
        },
        put: function() {
          return _this.logger.warning(msg);
        },
        "delete": function() {
          return _this.logger.warning(msg);
        }
      };
    };

    Robot.prototype.loadAdapter = function(path, adapter) {
      var err;
      this.logger.debug("Loading adapter " + adapter);
      try {
        path = __indexOf.call(HUBOT_DEFAULT_ADAPTERS, adapter) >= 0 ? "" + path + "/" + adapter : "hubot-" + adapter;
        return this.adapter = require(path).use(this);
      } catch (_error) {
        err = _error;
        this.logger.error("Cannot load adapter " + adapter + " - " + err);
        return process.exit(1);
      }
    };

    Robot.prototype.helpCommands = function() {
      return this.commands.sort();
    };

    Robot.prototype.parseHelp = function(path) {
      var body, cleanedLine, currentSection, line, nextSection, scriptDocumentation, scriptName, _i, _j, _len, _len1, _ref2, _ref3, _results;
      this.logger.debug("Parsing help for " + path);
      scriptName = Path.basename(path).replace(/\.(coffee|js)$/, '');
      scriptDocumentation = {};
      body = Fs.readFileSync(path, 'utf-8');
      currentSection = null;
      _ref2 = body.split("\n");
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        line = _ref2[_i];
        if (!(line[0] === '#' || line.substr(0, 2) === '//')) {
          break;
        }
        cleanedLine = line.replace(/^(#|\/\/)\s?/, "").trim();
        if (cleanedLine.length === 0) {
          continue;
        }
        if (cleanedLine.toLowerCase() === 'none') {
          continue;
        }
        nextSection = cleanedLine.toLowerCase().replace(':', '');
        if (__indexOf.call(HUBOT_DOCUMENTATION_SECTIONS, nextSection) >= 0) {
          currentSection = nextSection;
          scriptDocumentation[currentSection] = [];
        } else {
          if (currentSection) {
            scriptDocumentation[currentSection].push(cleanedLine.trim());
            if (currentSection === 'commands') {
              this.commands.push(cleanedLine.trim());
            }
          }
        }
      }
      if (currentSection === null) {
        this.logger.info("" + path + " is using deprecated documentation syntax");
        scriptDocumentation.commands = [];
        _ref3 = body.split("\n");
        _results = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          line = _ref3[_j];
          if (!(line[0] === '#' || line.substr(0, 2) === '//')) {
            break;
          }
          if (!line.match('-')) {
            continue;
          }
          cleanedLine = line.slice(2, +line.length + 1 || 9e9).replace(/^hubot/i, this.name).trim();
          scriptDocumentation.commands.push(cleanedLine);
          _results.push(this.commands.push(cleanedLine));
        }
        return _results;
      }
    };

    Robot.prototype.send = function() {
      var strings, user, _ref2;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.adapter).send.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Robot.prototype.reply = function() {
      var strings, user, _ref2;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.adapter).reply.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Robot.prototype.messageRoom = function() {
      var room, strings, user, _ref2;
      room = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      user = {
        room: room
      };
      return (_ref2 = this.adapter).send.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Robot.prototype.on = function() {
      var args, event, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.events).on.apply(_ref2, [event].concat(__slice.call(args)));
    };

    Robot.prototype.emit = function() {
      var args, event, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.events).emit.apply(_ref2, [event].concat(__slice.call(args)));
    };

    Robot.prototype.run = function() {
      this.emit("running");
      return this.adapter.run();
    };

    Robot.prototype.shutdown = function() {
      if (this.pingIntervalId != null) {
        clearInterval(this.pingIntervalId);
      }
      process.removeListener('uncaughtException', this.onUncaughtException);
      this.adapter.close();
      return this.brain.close();
    };

    Robot.prototype.parseVersion = function() {
      var pkg;
      pkg = require(Path.join(__dirname, '..', 'package.json'));
      return this.version = pkg.version;
    };

    Robot.prototype.http = function(url, options) {
      return HttpClient.create(url, this.extend({}, this.globalHttpOptions, options)).header('User-Agent', "Hubot/" + this.version);
    };

    Robot.prototype.extend = function() {
      var key, obj, source, sources, value, _i, _len;
      obj = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        for (key in source) {
          if (!__hasProp.call(source, key)) continue;
          value = source[key];
          obj[key] = value;
        }
      }
      return obj;
    };

    return Robot;

  })();

  module.exports = Robot;

}).call(this);
